openapi: "3.1.0"
info:
  title: "DP API"
  description: "DP API"
  version: "1.0.0"
servers:
- url: "https://DP"
paths:
  /:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Hello World!"
  /measurements/{stationId}:
    get:
      description: ""
      parameters:
      - name: "dateFrom"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "dateTo"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "element"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "resolution"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "stationId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing required query parameters: dateFrom, dateTo, resolution\
                    \ and element"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Unit"
  /measurements/{stationId}/actual:
    get:
      description: ""
      parameters:
      - name: "stationId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing required parameter: stationId"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Unit"
  /measurements/{stationId}/recent:
    get:
      description: ""
      parameters:
      - name: "stationId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing required parameter: stationId"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Unit"
  /measurements/{stationId}/statsDayLongTerm:
    get:
      description: "get<MeasurementResource.AllTimeRecordsStation> { resource -> <br>\
        \ val stationId = resource.parent.stationId <br> if (stationId.isBlank())\
        \ { <br> return@get call.respond( <br> HttpStatusCode.BadRequest, <br> \"\
        Missing required parameter: stationId\" <br> ) <br> } <br> val records = measurementService.getAllTimeRecordsStation(stationId)\
        \ <br> call.respond(records) <br> }"
      parameters:
      - name: "stationId"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "date"
        in: "query"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing required parameter: date"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Unit"
  /stations:
    get:
      description: ""
      parameters:
      - name: "elevationMin"
        in: "query"
        required: false
        schema:
          type: "number"
      - name: "elevationMax"
        in: "query"
        required: false
        schema:
          type: "number"
      - name: "active"
        in: "query"
        required: false
        schema:
          type: "boolean"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Station"
  /stations/{id}:
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Station not found"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Station"
  /stations/closest:
    get:
      description: ""
      parameters:
      - name: "lat"
        in: "query"
        required: true
        schema:
          type: "number"
      - name: "long"
        in: "query"
        required: true
        schema:
          type: "number"
      - name: "count"
        in: "query"
        required: false
        schema:
          type: "integer"
      responses:
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "No stations found"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Station"
  /json/kotlinx-serialization:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
components:
  schemas:
    Unit:
      type: "object"
      properties: {}
    LocalDateTime:
      type: "object"
      properties: {}
    StationElement:
      type: "object"
      properties:
        stationId:
          type: "string"
        observationType:
          type: "string"
        beginDate:
          $ref: "#/components/schemas/LocalDateTime"
        endDate:
          $ref: "#/components/schemas/LocalDateTime"
        elementAbbreviation:
          type: "string"
        elementName:
          type: "string"
        unitDescription:
          type: "string"
        height:
          type: "number"
          format: "double"
        schedule:
          type: "string"
      required:
      - "stationId"
      - "observationType"
      - "endDate"
      - "elementAbbreviation"
      - "elementName"
      - "unitDescription"
      - "schedule"
    Station:
      type: "object"
      properties:
        stationId:
          type: "string"
        code:
          type: "string"
        startDate:
          $ref: "#/components/schemas/LocalDateTime"
        endDate:
          $ref: "#/components/schemas/LocalDateTime"
        location:
          type: "string"
        longitude:
          type: "number"
          format: "double"
        latitude:
          type: "number"
          format: "double"
        elevation:
          type: "number"
          format: "double"
        stationElements:
          type: "array"
          items:
            $ref: "#/components/schemas/StationElement"
      required:
      - "stationId"
      - "code"
      - "endDate"
      - "location"
      - "stationElements"
    Map:
      type: "object"
      properties: {}
    Map_String:
      type: "string"